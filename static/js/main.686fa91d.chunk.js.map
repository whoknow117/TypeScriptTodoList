{"version":3,"sources":["components/TodoList/TodoAffairs.module.scss","components/TodoList/Affairs/EditableSpan/EditablSpan.module.scss","components/TodoList/TodoInput/TodoInput.module.scss","components/TodoList/Affairs/Affairs.module.scss","components/common/SuperButton/SupperButton.module.scss","components/TodoList/TodoButtons/TodoButtons.module.scss","components/TodoList/TodoInput/TodoInput.tsx","components/common/SuperButton/SupperButton.tsx","components/TodoList/Affairs/EditableSpan/EditableSpan.tsx","components/TodoList/Affairs/Affairs.tsx","components/TodoList/TodoButtons/TodoButtons.tsx","components/TodoList/TodoAffairs.tsx","state/todolists-reducer.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","TodoInput","children","addItem","useState","title","setTitle","error","setError","addItm","trim","className","classes","todoWrapper","form","TextField","variant","onKeyPress","e","key","value","label","helperText","onChange","currentTarget","IconButton","onClick","AddBox","span","errorSpan","SupperButton","filter","red","restProps","buttonClassName","common","activeBtn","redBtn","EditableSpan","bold","modeOn","changeValue","editMode","setEditMode","titleValue","setTitleValue","activatedEditMode","deActivatedEditMode","wrapper","input","onBlur","autoFocus","type","onDoubleClick","refactorButton","Affairs","taskID","changeTaskTitle","todoID","changeTaskStatus","deleteCallBack","task","checkbox","Checkbox","checked","isDone","id","done","newValue","Delete","TodoButtons","changeFilter","Button","color","TodoList","setTodoLists","todoLists","changeTodoListTitle","tasks","addTask","state","action","tl","newTodoList","v1","todoList","find","todoList2","Error","todoListsReducer","map","t","infoBlock","info","App","todoListID1","setTasks","todoListID","newFilterValue","newTask","todoListTasks","newTitle","newTodoListID","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.686fa91d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoWrapper\":\"TodoAffairs_todoWrapper__2dlvy\",\"active\":\"TodoAffairs_active__RBRlY\",\"tasks\":\"TodoAffairs_tasks__1fz1s\",\"title\":\"TodoAffairs_title__3-zu-\",\"span\":\"TodoAffairs_span__2P6Gt\",\"infoBlock\":\"TodoAffairs_infoBlock__2kqKR\",\"info\":\"TodoAffairs_info__1O81Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"EditablSpan_wrapper__Tzl53\",\"bold\":\"EditablSpan_bold__3lbE0\",\"input\":\"EditablSpan_input__3_n0c\",\"refactorButton\":\"EditablSpan_refactorButton__1CyXX\",\"deleteButton\":\"EditablSpan_deleteButton__XHXER\",\"active\":\"EditablSpan_active__2t1P0\",\"common\":\"EditablSpan_common__2dl0o\",\"done\":\"EditablSpan_done__3eaMz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoWrapper\":\"TodoInput_todoWrapper__Exh6I\",\"form\":\"TodoInput_form__3hlvt\",\"errorInput\":\"TodoInput_errorInput__2MaRL\",\"span\":\"TodoInput_span__29UBg\",\"errorSpan\":\"TodoInput_errorSpan__AbmWJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoWrapper\":\"Affairs_todoWrapper__2BIel\",\"checkbox\":\"Affairs_checkbox__Ohjv1\",\"title\":\"Affairs_title__2gRVU\",\"refactorButton\":\"Affairs_refactorButton__1ouoI\",\"deleteButton\":\"Affairs_deleteButton__3RJjV\",\"active\":\"Affairs_active__1fnEa\",\"done\":\"Affairs_done__R6dzx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoWrapper\":\"SupperButton_todoWrapper__14j--\",\"redBtn\":\"SupperButton_redBtn__6fai5\",\"common\":\"SupperButton_common__2hrGu\",\"activeBtn\":\"SupperButton_activeBtn__EU8FB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoWrapper\":\"TodoButtons_todoWrapper__1vLn6\",\"activeBtn\":\"TodoButtons_activeBtn__VRYa2\"};","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\nimport classes from './TodoInput.module.scss';\nimport SupperInput from \"../../common/SuperInput/SupperInput\";\nimport SupperButton from \"../../common/SuperButton/SupperButton\";\nimport {Button, IconButton} from \"@material-ui/core\";\nimport {TextField} from \"@material-ui/core\";\nimport {AddBox} from \"@material-ui/icons\";\n\n\nexport type TodoInputType = {\n\n    addItem: (title: string) => void\n\n\n}\n\nconst TodoInput: React.FC<TodoInputType> = ({children, addItem}) => {\n\n    const [title, setTitle] = useState<string>(\"\")\n    const [error, setError] = useState<string>(\"\")\n\n    const addItm = () => {\n\n        if (title.trim() !== \"\") {\n            addItem(title.trim())\n            setTitle(\"\")\n        } else setError(\"Enter something\")\n\n    }\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        setError(\"\")\n        if(e.key === \"Enter\") {\n            addItm()\n        }\n    }\n\n\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setError(\"\")\n        setTitle(e.currentTarget.value)\n    }\n\n    return <div className={classes.todoWrapper}>\n\n\n        <div className={classes.form}>\n            <TextField variant={\"outlined\"}\n                       onKeyPress={onKeyPressHandler}\n                       value={title}\n                       label=\"title\"\n                       helperText={error}\n                       onChange={changeTitle}\n            />\n            <IconButton onClick={addItm}>\n                <AddBox/>\n            </IconButton>\n                {/*<Button variant=\"contained\" color={\"primary\"}  > </Button>*/}\n\n\n        </div>\n        <span className={`${classes.span} ${error && classes.errorSpan}`}>{error}</span>\n\n\n    </div>\n}\n\nexport default TodoInput;","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react';\nimport classes from './SupperButton.module.scss';\nimport {AffairsPriorityType} from \"../../../App\";\n\n\ntype DefaultButtonPropsType =  DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\n\n\n\n\nexport type SupperButtonType = DefaultButtonPropsType & {\n     red?: boolean\n     filter?: boolean\n}\n\nconst SupperButton:React.FC<SupperButtonType> = ({filter,red, children,...restProps}) => {\n\n\n    const buttonClassName =`${classes.common} ${filter ? classes.activeBtn: \"\"}${red ? classes.redBtn : \"\"}`\n\n    return <div className={classes.todoWrapper}>\n\n        <button className={buttonClassName} {...restProps}>{children}</button>\n\n    </div>\n}\n\nexport default SupperButton;","import React, {KeyboardEvent, ChangeEvent, useState } from \"react\";\r\nimport  classes from './EditablSpan.module.scss';\r\nimport SupperButton from \"../../../common/SuperButton/SupperButton\";\r\nimport CreateIcon from \"@material-ui/icons/Create\";\r\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\r\nimport {DefaultTasksType} from \"../../../../App\";\r\n\r\nexport type EditableSpanType = {\r\n    title: string\r\n    changeValue: (newValue: string) => void\r\n    modeOn?: boolean\r\n    bold?: boolean\r\n\r\n\r\n}\r\n\r\nconst EditableSpan:React.FC<EditableSpanType>= ({bold, modeOn, changeValue, title}) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [titleValue, setTitleValue] =useState<string>(title);\r\n\r\n\r\n    const activatedEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deActivatedEditMode = () => {\r\n        setEditMode(false)\r\n        changeValue(titleValue)\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        setTitleValue( e.currentTarget.value)\r\n    }\r\n\r\n    const deactivateEditM = (e: KeyboardEvent<HTMLInputElement>) => {\r\n\r\n\r\n        if(e.key === \"Enter\"){\r\n            deActivatedEditMode()\r\n        }\r\n\r\n\r\n    }\r\n\r\n    return ( <div className={classes.wrapper}>\r\n\r\n            { editMode ? <input onChange={changeTitle}\r\n                                className={classes.input}\r\n                                value={titleValue}\r\n                                onKeyPress={deactivateEditM }\r\n                                onBlur={deActivatedEditMode}\r\n                                autoFocus={true} type=\"text\"/> :\r\n                <span className={`${classes.common} ${ bold ? classes.bold : \"\"}`} onDoubleClick={activatedEditMode}>{title}</span>}\r\n            {modeOn ? <div className={classes.refactorButton}>\r\n                <SupperButton onClick={activatedEditMode}/>\r\n                <CreateIcon/>\r\n            </div> : \"\"}\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default EditableSpan;\r\n\r\n\r\n","import React, {ChangeEvent} from 'react';\nimport classes from './Affairs.module.scss';\nimport {AffairsPriorityType, DefaultTasksType} from \"../../../App\";\nimport SupperCheckbox from \"../../common/SuperCheckbox/SupperCheckbox\";\nimport SupperButton from \"../../common/SuperButton/SupperButton\";\nimport EditableSpan from \"./EditableSpan/EditableSpan\";\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport CreateIcon from '@material-ui/icons/Create';\nimport {CheckBox, Delete} from '@material-ui/icons';\nimport {IconButton, Checkbox} from \"@material-ui/core\";\n\n\nexport type PropsType = {\n    task: DefaultTasksType\n    deleteCallBack: (taskID: string, todoListID: string) => void\n    changeTaskStatus: (taskID: string, isDone: boolean, todoListID: string) => void\n    todoID: string\n    changeTaskTitle: (taskID: string, title: string, todoListID: string) => void\n    taskID: string\n}\n\nconst\n    Affairs: React.FC<PropsType> = ({taskID, changeTaskTitle, todoID, changeTaskStatus, deleteCallBack, task, ...restProps}) => {\n\n\n        const changeStatus = (e: ChangeEvent<HTMLInputElement>) => {\n            changeTaskStatus(task.id, e.currentTarget.checked, todoID)\n        }\n\n        const deleteTask = () => {\n            deleteCallBack(task.id, todoID)\n        }\n        const changeTaskTitleCallback = (newValue: string) => {\n            changeTaskTitle(task.id, newValue, todoID)\n        }\n\n        return <div className={classes.todoWrapper}>\n\n        <span className={classes.checkbox}>\n         <Checkbox checked={task.isDone} onChange={changeStatus}/>\n        </span>\n            <p className={`${classes.title} ${task.isDone ? classes.done : \"\"}`}>\n                <EditableSpan\n                    modeOn\n                    changeValue={changeTaskTitleCallback}\n                    title={task.title}/>\n\n            </p>\n            {/*<div className={classes.refactorButton}>*/}\n            {/*    <SupperButton red onClick={deleteTask}> </SupperButton>*/}\n\n            {/*    <CreateIcon/>*/}\n            {/*</div>*/}\n            <IconButton   onClick={deleteTask}>\n                <Delete/>\n            </IconButton>\n        </div>\n    }\n\nexport default Affairs;","import React from 'react';\nimport classes from './TodoButtons.module.scss';\nimport {AffairsPriorityType, DefaultTasksType} from \"../../../App\";\nimport SupperButton from \"../../common/SuperButton/SupperButton\";\nimport {Button} from \"@material-ui/core\";\n\n\n\nexport type TodoButtonsType = {\n    changeFilter:(filter: AffairsPriorityType, todoListID:string) => void\n    todoID: string\n    filter: AffairsPriorityType\n}\n\nconst TodoButtons:React.FC<TodoButtonsType> = ({filter, todoID, changeFilter}) => {\n\n\n\n    const setAll = () => {changeFilter(\"all\", todoID)}\n    const setComplete = () => {changeFilter(\"complete\", todoID)}\n    const setActive = () => {changeFilter(\"active\", todoID)}\n\n    return <div className={classes.todoWrapper}>\n\n        <Button\n            color={filter === 'all' ? \"secondary\" : \"primary\"}\n            variant={\"contained\"}\n            onClick={setAll}>all</Button>\n        <Button\n            color={filter === 'complete' ? \"secondary\" : \"primary\"}\n            variant={\"contained\"}\n            onClick={setComplete}>complete</Button>\n        <Button\n            color={filter === 'active' ? \"secondary\" : \"primary\"}\n            variant={\"contained\"}\n            onClick={setActive}>active</Button>\n\n\n    </div>\n}\n\nexport default TodoButtons;","import React, {ChangeEvent, useState} from 'react';\nimport classes from './TodoAffairs.module.scss';\nimport TodoInput from \"./TodoInput/TodoInput\";\nimport Affairs from \"./Affairs/Affairs\";\nimport TodoButtons from \"./TodoButtons/TodoButtons\";\nimport {AffairsPriorityType, DefaultTasksType, TaskStateType, TodoListType} from \"../../App\";\nimport SupperInput from \"../common/SuperInput/SupperInput\";\nimport SupperButton from \"../common/SuperButton/SupperButton\";\nimport EditableSpan from \"./Affairs/EditableSpan/EditableSpan\";\nimport {IconButton} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\nimport {todoListsReducer, removeTodolistAC} from \"../../state/todolists-reducer\";\n\n\nexport type TodoListPropsType = {\n    tasks: Array<DefaultTasksType>\n    changeFilter: (newFilterValue: AffairsPriorityType, todoListID: string) => void\n    deleteCallBack: (taskID: string, todoListID: string) => void\n    addTask: (title: string, todoListID: string) => void\n    changeTaskStatus: (taskID: string, isDone: boolean, todoListID: string) => void\n    todoID: string\n    title: string\n    changeTaskTitle: (taskID: string, title: string, todoListID: string) => void\n    todoLists:Array<TodoListType>\n    filter: AffairsPriorityType\n    changeTodoListTitle: (newTitle: string, todoListID: string) => void\n    setTodoLists:(todoLists: Array<TodoListType>) => void\n\n}\n\nconst TodoList: React.FC<TodoListPropsType> = ({setTodoLists, todoLists,changeTodoListTitle,  filter,\n                                              changeTaskTitle, title,\n                                             todoID, tasks,\n                                              changeTaskStatus, addTask, deleteCallBack, changeFilter}) => {\n\n    const addItem = (title: string) => {\n        addTask(title, todoID)\n    }\n    // let activeTasks = tasks.filter(t => t.isDone === false);\n    // let doneTasks = tasks.filter(t => t.isDone === true);\n\n    const removeTodoCallback = () => {\n        setTodoLists(todoListsReducer(todoLists,removeTodolistAC(todoID)))\n    }\n    const changeTodoListTitleCallback = (title: string) => {\n        changeTodoListTitle(title, todoID)\n    }\n\n    return <div className={classes.todoWrapper}>\n        <div className={classes.title}>\n           <div className={classes.span}>\n               <EditableSpan\n                    bold\n                   changeValue={changeTodoListTitleCallback}\n                   title={title}/>\n           </div>\n            <IconButton>\n                <Delete onClick={removeTodoCallback}/>\n            </IconButton>\n        </div>\n\n        <div className={classes.input}>\n            <TodoInput addItem={addItem}>addTask</TodoInput>\n        </div>\n\n        <div className={classes.tasks}>\n            {tasks.map(t => <Affairs\n                changeTaskTitle={changeTaskTitle}\n                key={t.id}\n                taskID={t.id}\n                changeTaskStatus={changeTaskStatus}\n                task={t}\n                todoID={todoID}\n                deleteCallBack={deleteCallBack}\n            />)}\n        </div>\n        <TodoButtons filter={filter} todoID={todoID} changeFilter={changeFilter}/>\n        <div className={classes.infoBlock}>\n            <span className={classes.info}>\n            {/*tasks todo: {activeTasks.length}*/}\n        </span>\n            <span className={classes.info}>\n            {/*done tasks: {doneTasks.length}*/}\n        </span>\n        </div>\n\n\n    </div>\n}\n\nexport default TodoList;","import {AffairsPriorityType, TodoListType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: \"REMOVE-TODOLIST\",\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: \"ADD-TODOLIST\",\r\n    title: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: \"CHANGE-TODOLIST-TITLE\",\r\n    title: string\r\n    id: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: \"CHANGE-TODOLIST-FILTER\",\r\n    filter: AffairsPriorityType\r\n    id: string\r\n}\r\n\r\n\r\nexport type ActionsType =\r\n    RemoveTodolistActionType\r\n    | ChangeTodolistFilterActionType\r\n    | ChangeTodolistTitleActionType\r\n    | AddTodolistActionType\r\n\r\n\r\nexport const todoListsReducer = (state: Array<TodoListType>, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n\r\n            return state.filter((tl => tl.id !== action.id))\r\n\r\n        case 'ADD-TODOLIST' :\r\n            const newTodoListID: string = v1()\r\n            const newTodoList: TodoListType = {\r\n                id: newTodoListID,\r\n                title: action.title,\r\n                filter: \"all\"\r\n            }\r\n            return [...state, newTodoList]\r\n        case 'CHANGE-TODOLIST-TITLE' :\r\n            const todoList = state.find(tl => tl.id === action.id)\r\n            if (todoList) {\r\n                todoList.title = action.title\r\n                return [...state]\r\n            }\r\n            return state;\r\n        case 'CHANGE-TODOLIST-FILTER' :\r\n            const todoList2 = state.find(tl => tl.id === action.id)\r\n            if (todoList2) {\r\n                todoList2.filter = action.filter\r\n                return [...state]\r\n            }\r\n            return state;\r\n        default:\r\n            throw new Error(\"I don't understand this type\")\r\n    }\r\n}\r\n\r\n\r\nexport const removeTodolistAC = (todoListID: string): RemoveTodolistActionType => (\r\n    {type: \"REMOVE-TODOLIST\", id: todoListID}\r\n)\r\n\r\nexport const addTodolistAC = (newTitle: string): AddTodolistActionType => (\r\n    {type: \"ADD-TODOLIST\", title: newTitle}\r\n)\r\n\r\nexport const changeTodoListTitleAC = (newTitle: string, todoListID: string): ChangeTodolistTitleActionType => (\r\n    {type: \"CHANGE-TODOLIST-TITLE\", title: newTitle, id: todoListID}\r\n)\r\n\r\nexport const changeTodoListFilterAC = (filter: AffairsPriorityType, id: string): ChangeTodolistFilterActionType => (\r\n    {type: \"CHANGE-TODOLIST-FILTER\", filter: filter, id: id}\r\n)","import React, {ChangeEvent, useState} from 'react';\nimport './App.css';\nimport TodoList from \"./components/TodoList/TodoAffairs\";\nimport {v1} from \"uuid\";\nimport TodoInput from \"./components/TodoList/TodoInput/TodoInput\";\n// import {todoListsReducer, addTodolistAC} from \"./state/todolists-reducer\";\n\nexport type DefaultTasksType = {\n    id: string\n    title: string\n    isDone: boolean\n}\nexport type AffairsPriorityType = \"all\" | \"complete\" | \"active\"\n\nexport type TaskStateType = {\n    [key: string]: Array<DefaultTasksType>\n}\n\nexport type TodoListType = {\n    id: string\n    title: string\n    filter: AffairsPriorityType\n}\n\n\nfunction App() {\n\n\n    const todoListID1 = v1();\n    const todoListID2 = v1();\n\n    const [todoLists, setTodoLists] = useState<Array<TodoListType>>([\n        {id: todoListID1, title: \"Обычный список задач\", filter: \"all\"},\n\n    ])\n    const [tasks, setTasks] = useState<TaskStateType>({\n        [todoListID1]: [\n            {id: v1(), title: \"React\", isDone: false},\n            {id: v1(), title: \"Html\", isDone: false},\n            {id: v1(), title: \"Css\", isDone: false},\n            {id: v1(), title: \"Games\", isDone: true},\n        ],\n\n    })\n\n\n    const changeTaskStatus = (taskID: string, isDone: boolean, todoListID: string) => {\n        const todoListTasks = tasks[todoListID]\n\n        const task = todoListTasks.find(task => task.id === taskID)\n        if (task) {\n            task.isDone = isDone\n            setTasks({...tasks})\n        }\n\n    }\n    const changeTaskTitle = (taskID: string, title: string, todoListID: string) => {\n        const todoListTasks = tasks[todoListID]\n\n        const task = todoListTasks.find(task => task.id === taskID)\n        if (task) {\n            task.title = title\n            setTasks({...tasks})\n        }\n\n    }\n    const changeFilter = (newFilterValue: AffairsPriorityType, todoListID: string) => {\n        const todoList = todoLists.find(tl => tl.id === todoListID)\n        if (todoList) {\n            todoList.filter = newFilterValue\n        }\n        setTodoLists([...todoLists])\n    }\n\n    const addTask = (title: string, todoListID: string) => {\n\n        const newTask: DefaultTasksType = {\n            id: v1(),\n            title: title,\n            isDone: false\n        }\n        tasks[todoListID] = [newTask, ...tasks[todoListID]]\n        setTasks({...tasks})\n    }\n    const deleteCallBack = (taskID: string, todoListID: string) => {\n        const todoListTasks = tasks[todoListID];\n        tasks[todoListID] = todoListTasks.filter(task => task.id !== taskID)\n        setTasks({...tasks})\n\n    }\n\n    const changeTodoListTitle = (newTitle: string, todoListID: string) => {\n        const todoList = todoLists.find(tl => tl.id === todoListID)\n        if (todoList) {\n            todoList.title = newTitle\n        }\n        setTodoLists([...todoLists])\n    }\n    const removeTodoList = (todoListID: string) => {\n        const filteredTodoList = todoLists.filter(tl => tl.id !== todoListID)\n        setTodoLists(filteredTodoList)\n        delete tasks[todoListID]\n        setTasks({...tasks})\n    }\n    const addTodoList = (title: string) => {\n        const newTodoListID: string = v1()\n        const newTodoList: TodoListType = {\n            id: newTodoListID,\n            title: title,\n            filter: \"all\"\n        }\n        setTodoLists(todoLists => [...todoLists, newTodoList])\n        setTasks(tasks => ({...tasks, [newTodoListID]: []}))\n    }\n\n\n\n\n    return (\n\n        <div className=\"App\">\n            <div className='createTodo'>\n                <TodoInput addItem={addTodoList}>addTodo</TodoInput>\n            </div>\n            <div className=\"todoLists\">\n                {todoLists.map(tl => {\n\n                    let todoListTasks = tasks[tl.id]\n                    if (tl.filter === \"complete\") {\n                        todoListTasks = tasks[tl.id].filter(task => task.isDone === true)\n                    }\n                    if (tl.filter === \"active\") {\n                        todoListTasks = tasks[tl.id].filter(task => task.isDone === false)\n                    }\n\n\n                    return (\n                        <div>\n\n                            <TodoList\n                                todoLists={todoLists}\n                                todoID={tl.id}\n                                setTodoLists={setTodoLists}\n                                key={tl.id}\n                                title={tl.title}\n                                filter={tl.filter}\n                                tasks={todoListTasks}\n                                changeFilter={changeFilter}\n                                deleteCallBack={deleteCallBack}\n                                addTask={addTask}\n                                changeTaskStatus={changeTaskStatus}\n                                changeTaskTitle={changeTaskTitle}\n                                changeTodoListTitle={changeTodoListTitle}\n                            />\n                        </div>\n                    )\n                })}\n            </div>\n\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}