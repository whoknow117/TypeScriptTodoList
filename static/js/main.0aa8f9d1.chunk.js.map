{"version":3,"sources":["components/common/SuperInput/SupperInput.module.scss","components/TodoList/Affairs/Affairs.module.scss","components/common/SuperButton/SupperButton.module.scss","components/TodoList/TodoInput/TodoInput.module.scss","components/TodoList/TodoButtons/TodoButtons.module.scss","components/common/SuperInput/SupperInput.tsx","components/common/SuperButton/SupperButton.tsx","components/TodoList/TodoInput/TodoInput.tsx","components/common/SuperCheckbox/SupperCheckbox.tsx","components/TodoList/Affairs/EditableSpan/EditableSpan.tsx","components/TodoList/Affairs/Affairs.tsx","components/TodoList/TodoButtons/TodoButtons.tsx","components/TodoList/TodoAffairs.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","SupperInput","onChangeText","error","onChange","restProps","type","inputClassName","classes","errorInput","common","className","todoWrapper","e","currentTarget","value","SupperButton","red","children","buttonClassName","redBtn","TodoInput","addItem","useState","title","setTitle","setError","onClick","trim","SupperCheckbox","onChangeChecked","checked","EditableSpan","changeValue","editMode","setEditMode","titleValue","setTitleValue","onBlur","autoFocus","onDoubleClick","Affairs","changeTaskTitle","todoID","changeTaskStatus","deleteCallBack","task","isDone","active","id","newValue","name","btn","TodoButtons","changeFilter","TodoList","removeTodoList","tasks","addTask","map","t","App","todoListID1","v1","todoListID2","filter","todoLists","setTodoLists","setTasks","taskID","todoListID","find","newFilterValue","todoList","tl","changeTodoListTitle","newTitle","todoListTasks","filteredTodoList","newTask","newTodoListID","newTodoList","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0aa8f9d1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorInput\":\"SupperInput_errorInput__3DQ6j\",\"common\":\"SupperInput_common__3pE08\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoWrapper\":\"Affairs_todoWrapper__2BIel\",\"btn\":\"Affairs_btn__jL8z7\",\"active\":\"Affairs_active__1fnEa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"redBtn\":\"SupperButton_redBtn__6fai5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoWrapper\":\"TodoInput_todoWrapper__Exh6I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoWrapper\":\"TodoButtons_todoWrapper__1vLn6\"};","import React, {ButtonHTMLAttributes, ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react';\nimport classes from './SupperInput.module.scss';\n\n\ntype DefaultButtonPropsType =  DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n\nexport type SupperInputType = DefaultButtonPropsType & {\n    onChangeText?: (value: string) => void\n    error?: string\n\n}\n\nconst SupperInput:React.FC<SupperInputType> = ({onChangeText\n                                                   ,error,onChange,type\n\n                                                   , ...restProps}) => {\n\n\n\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange\n        && onChange(e)\n        onChangeText && onChangeText(e.currentTarget.value)\n    }\n\n\n    let inputClassName = `${error ? classes.errorInput : classes.common}`\n\n    return <div className={classes.todoWrapper}>\n        <input\n            type={\"text\"}\n            onChange={onChangeCallback}\n            className={inputClassName}\n            {...restProps}\n        />\n    </div>\n}\n\nexport default SupperInput;","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react';\nimport classes from './SupperButton.module.scss';\n\n\ntype DefaultButtonPropsType =  DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\n\n\n\n\nexport type SupperButtonType = DefaultButtonPropsType & {\n     red?: boolean\n}\n\nconst SupperButton:React.FC<SupperButtonType> = ({red, children,...restProps}) => {\n\n\n    const buttonClassName =`${ red ? classes.redBtn : \"\"}`\n\n    return <div className={classes.todoWrapper}>\n\n        <button className={buttonClassName} {...restProps}>{children}</button>\n\n    </div>\n}\n\nexport default SupperButton;","import React, {ChangeEvent, useState} from 'react';\nimport classes from './TodoInput.module.scss';\nimport SupperInput from \"../../common/SuperInput/SupperInput\";\nimport SupperButton from \"../../common/SuperButton/SupperButton\";\n\n\n\n\nexport type TodoInputType = {\n\n    addItem: (title: string ) => void\n\n\n}\n\nconst TodoInput: React.FC<TodoInputType> = ({   addItem}) => {\n\n    const [title, setTitle] = useState<string>(\"\")\n    const [error, setError] = useState<string>(\"\")\n\n    const addItm = () => {\n\n        if (title.trim() !== \"\") {\n            addItem(title.trim() )\n            setTitle(\"\")\n        } else setError(\"error\")\n\n    }\n\n\n\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setError(\"\")\n        setTitle(e.currentTarget.value)\n    }\n\n    return <div className={classes.todoWrapper}>\n\n\n        <SupperInput error={error} value={title} onChange={changeTitle}/>\n        <SupperButton onClick={addItm}>add</SupperButton>\n        <SupperButton red  >X</SupperButton>\n        {error ? <span>error</span> : \"\"}\n\n\n    </div>\n}\n\nexport default TodoInput;","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react';\r\nimport classes from './SupperCheckbox.module.scss';\r\n\r\n\r\ntype DefaultButtonPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\n\r\nexport type SupperCheckboxType = DefaultButtonPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n\r\n}\r\n\r\nconst SupperCheckbox: React.FC<SupperCheckboxType> = ({\r\n                                                          onChangeChecked,\r\n                                                          type,\r\n                                                          onChange,\r\n                                                          children\r\n                                                          , ...restProps\r\n                                                      }) => {\r\n\r\n\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange\r\n        && onChange(e);\r\n        onChangeChecked\r\n        &&\r\n        onChangeChecked(e.currentTarget.checked)\r\n    }\r\n\r\n    return <div className={classes.todoWrapper}>\r\n\r\n        <label>\r\n            <input\r\n                type=\"checkbox\"\r\n                onChange={onChangeCallback}\r\n                {...restProps}\r\n            />\r\n        </label>\r\n    \r\n    </div>\r\n}\r\n\r\nexport default SupperCheckbox;","import React, { ChangeEvent, useState } from \"react\";\r\n\r\nexport type EditableSpanType = {\r\n    title: string\r\n    changeValue: (newValue: string) => void\r\n}\r\n\r\nconst EditableSpan:React.FC<EditableSpanType>= ({changeValue, title}) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [titleValue, setTitleValue] =useState<string>(title);\r\n\r\n    const activatedEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deActivatedEditMode = () => {\r\n        setEditMode(false)\r\n        changeValue(titleValue)\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        setTitleValue( e.currentTarget.value)\r\n    }\r\n\r\n    return ( editMode ? <input onChange={changeTitle} value={titleValue} onBlur={deActivatedEditMode} autoFocus={true} type=\"text\"/> : <span onDoubleClick={activatedEditMode}>{title}</span>\r\n\r\n    )\r\n}\r\n\r\nexport default EditableSpan;","import React, {ChangeEvent} from 'react';\nimport classes from './Affairs.module.scss';\nimport {DefaultTasksType} from \"../../../App\";\nimport SupperCheckbox from \"../../common/SuperCheckbox/SupperCheckbox\";\nimport SupperButton from \"../../common/SuperButton/SupperButton\";\nimport EditableSpan from \"./EditableSpan/EditableSpan\";\n\n\n\nexport type PropsType = {\n    task: DefaultTasksType\n    deleteCallBack: (taskID: string, todoListID: string) => void\n    changeTaskStatus : (taskID: string, isDone: boolean, todoListID: string) => void\n    todoID: string\n    changeTaskTitle:(taskID: string, title: string, todoListID: string) => void\n}\n\nconst Affairs:React.FC<PropsType> = ({changeTaskTitle,todoID, changeTaskStatus, deleteCallBack, task, ...restProps}) => {\n\n    const deleteTask = () => {deleteCallBack(task.id,todoID) }\n    const changeStatus = (e: ChangeEvent<HTMLInputElement>) => {changeTaskStatus(task.id, e.currentTarget.checked,todoID)}\n    const activeTask = `${task.isDone ? classes.active : \"\"}`\n\n    const  changeTitle = (newValue:string) => {changeTaskTitle(task.id,newValue, todoID)}\n\n    return <div className={classes.todoWrapper}>\n        {/*<input checked={task.isDone} type=\"checkbox\" onChange={changeStatus} />*/}\n        <SupperCheckbox checked={task.isDone} onChange={changeStatus}/>\n        <EditableSpan changeValue={changeTitle} title={task.name}/>\n        <div className={classes.btn}>\n            {/*<button onClick={deleteTask}>x</button>*/}\n            <SupperButton red onClick={deleteTask}>X</SupperButton>\n        </div>\n    </div>\n}\n\nexport default Affairs;","import React from 'react';\nimport classes from './TodoButtons.module.scss';\nimport {AffairsPriorityType, DefaultTasksType} from \"../../../App\";\nimport SupperButton from \"../../common/SuperButton/SupperButton\";\n\n\n\nexport type TodoButtonsType = {\n    changeFilter:(filter: AffairsPriorityType, todoListID:string) => void\n    todoID: string\n}\n\nconst TodoButtons:React.FC<TodoButtonsType> = ({todoID, changeFilter}) => {\n\n\n\n    const setAll = () => {changeFilter(\"all\", todoID)}\n    const setComplete = () => {changeFilter(\"complete\", todoID)}\n    const setActive = () => {changeFilter(\"active\", todoID)}\n\n    return <div className={classes.todoWrapper}>\n\n        <SupperButton onClick={setAll}>all</SupperButton>\n        <SupperButton onClick={setComplete}>complete</SupperButton>\n        <SupperButton onClick={setActive}>active</SupperButton>\n\n\n    </div>\n}\n\nexport default TodoButtons;","import React, {ChangeEvent, useState} from 'react';\nimport classes from './TodoAffairs.module.scss';\nimport TodoInput from \"./TodoInput/TodoInput\";\nimport Affairs from \"./Affairs/Affairs\";\nimport TodoButtons from \"./TodoButtons/TodoButtons\";\nimport {AffairsPriorityType, DefaultTasksType} from \"../../App\";\n\n\nexport type TodoListType = {\n    tasks: Array<DefaultTasksType>\n    changeFilter: (newFilterValue: AffairsPriorityType, todoListID: string) => void\n    deleteCallBack: (taskID: string, todoListID: string) => void\n    addTask: (title: string, todoListID: string) => void\n    changeTaskStatus : (taskID: string, isDone: boolean, todoListID: string) => void\n    todoID: string\n    title: string\n    changeTaskTitle:(taskID: string, title: string, todoListID: string) => void\n    removeTodoList: (todoListID: string) => void\n    changeTodoListTitle:(newTitle:string, todoListID:string) => void\n}\n\nconst TodoList: React.FC<TodoListType> = ({changeTaskTitle, title, removeTodoList, todoID,tasks, changeTaskStatus,addTask, deleteCallBack, changeFilter }) => {\n\n    const addItem = (title: string) => {addTask(title,todoID)}\n\n    return <div className={classes.todoWrapper}>\n        <span>{title}</span>\n        <TodoInput  addItem={addItem}/>\n        {tasks.map(t => <Affairs\n            changeTaskTitle={changeTaskTitle}\n            key={t.id}\n            changeTaskStatus={changeTaskStatus}\n            task={t}\n            todoID={todoID}\n            deleteCallBack={deleteCallBack}\n        />)}\n        <TodoButtons todoID={todoID} changeFilter={changeFilter}/>\n\n\n    </div>\n}\n\nexport default TodoList;","import React, {ChangeEvent, useState} from 'react';\n\nimport './App.css';\nimport TodoList from \"./components/TodoList/TodoAffairs\";\nimport {v1} from \"uuid\";\nimport TodoInput from \"./components/TodoList/TodoInput/TodoInput\";\n\n\nexport type DefaultTasksType = {\n    id: string\n    name: string\n    isDone: boolean\n}\nexport type AffairsPriorityType = \"all\" | \"complete\" | \"active\"\n\nexport type TaskStateType = {\n    [key: string]: Array<DefaultTasksType>\n}\n\nexport type TodoListType = {\n    id: string\n    title: string\n    filter: AffairsPriorityType\n}\n\n\n\n\nfunction App() {\n\n\n\n    const todoListID1 = v1();\n    const todoListID2 = v1();\n\n    const [todoLists, setTodoLists] = useState<Array<TodoListType>>([\n        {id: todoListID1, title: \"What to learn\", filter: \"all\"},\n        {id: todoListID2, title: \"What to eat\", filter: \"all\"},\n    ])\n\n    const [tasks, setTasks] = useState<TaskStateType>({\n        [todoListID1] : [\n            {id: v1(), name: \"React\", isDone: false},\n            {id: v1(), name: \"Html\", isDone: false},\n            {id: v1(), name: \"Css\", isDone: false},\n            {id: v1(), name: \"Games\", isDone: true},\n        ],\n        [todoListID2] : [\n            {id: v1(), name: \"React\", isDone: false},\n            {id: v1(), name: \"Html\", isDone: false},\n            {id: v1(), name: \"Css\", isDone: false},\n            {id: v1(), name: \"Games\", isDone: true},\n        ],\n    })\n\n\n    const changeTaskStatus = (taskID: string, isDone: boolean, todoListID: string) => {\n        const todoListTasks = tasks[todoListID]\n\n        const task = todoListTasks.find( task => task.id === taskID)\n        if(task) {\n            task.isDone = isDone\n            setTasks({...tasks})\n        }\n\n    }\n\n    const changeTaskTitle = (taskID: string, title: string, todoListID: string) => {\n        const todoListTasks = tasks[todoListID]\n\n        const task = todoListTasks.find( task => task.id === taskID)\n        if(task) {\n            task.name = title\n            setTasks({...tasks})\n        }\n\n    }\n\n    const changeFilter = (newFilterValue: AffairsPriorityType, todoListID: string) => {\n        const todoList = todoLists.find( tl => tl.id === todoListID)\n        if(todoList) {\n            todoList.filter = newFilterValue\n        }\n        setTodoLists([...todoLists])\n    }\n\n    const changeTodoListTitle = (newTitle: string, todoListID: string) => {\n        const todoList = todoLists.find( tl => tl.id === todoListID)\n        if(todoList) {\n            todoList.title = newTitle\n        }\n        setTodoLists([...todoLists])\n    }\n\n    const deleteCallBack = (taskID: string, todoListID: string) => {\n        const todoListTasks = tasks[todoListID];\n        tasks[todoListID] = todoListTasks.filter( task => task.id !== taskID)\n        setTasks({...tasks})\n\n    }\n    const removeTodoList = (todoListID: string) => {\n        const filteredTodoList = todoLists.filter( tl => tl.id !== todoListID)\n        setTodoLists(filteredTodoList)\n        delete tasks[todoListID]\n        setTasks({...tasks})\n    }\n\n    const addTask = (title: string,todoListID: string) => {\n\n        const newTask: DefaultTasksType = {\n            id: v1(),\n            name: title,\n            isDone: false\n        }\n        tasks[todoListID] = [ newTask,...tasks[todoListID]]\n        setTasks({...tasks})\n    }\n    const addTodoList = (title: string) => {\n        const newTodoListID: string = v1()\n        const newTodoList: TodoListType = {\n            id: newTodoListID,\n            title: title,\n            filter: \"all\"\n        }\n        setTodoLists(todoLists=>[  ...todoLists,newTodoList])\n        setTasks(tasks => ({...tasks,[newTodoListID]:[]}))\n    }\n\n    return (\n\n        <div className=\"App\">\n            <TodoInput addItem={addTodoList}/>\n            {todoLists.map( tl => {\n\n                let todoListTasks = tasks[tl.id]\n                if (tl.filter === \"complete\") {\n                     todoListTasks = tasks[tl.id].filter( task => task.isDone === true )\n                }\n                if (tl.filter === \"active\") {\n                      todoListTasks =  tasks[tl.id].filter( task => task.isDone === false)\n                }\n\n\n                return (\n                  <div>\n\n                      <TodoList\n                          todoID={tl.id}\n                          key={tl.id}\n                          title={tl.title}\n                          tasks={todoListTasks}\n                          changeFilter={changeFilter}\n                          deleteCallBack={deleteCallBack}\n                          addTask={addTask}\n                          changeTaskStatus={changeTaskStatus}\n                          removeTodoList={removeTodoList}\n                          changeTaskTitle={changeTaskTitle}\n                          changeTodoListTitle={changeTodoListTitle}\n                      />\n                  </div>\n                 )\n            })}\n\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}