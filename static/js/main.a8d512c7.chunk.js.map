{"version":3,"sources":["components/TodoList/TodoAffairs.module.scss","components/TodoList/Affairs/EditableSpan/EditablSpan.module.scss","components/TodoList/TodoInput/TodoInput.module.scss","components/TodoList/Affairs/Affairs.module.scss","components/common/SuperButton/SupperButton.module.scss","components/TodoList/TodoButtons/TodoButtons.module.scss","state/tasks-reducer.ts","state/todolists-reducer.ts","state/store.ts","components/TodoList/TodoInput/TodoInput.tsx","components/common/SuperButton/SupperButton.tsx","components/TodoList/Affairs/EditableSpan/EditableSpan.tsx","components/TodoList/Affairs/Affairs.tsx","components/TodoList/TodoButtons/TodoButtons.tsx","components/TodoList/TodoAffairs.tsx","AppWithRedux.tsx","index.tsx"],"names":["module","exports","InitialState","rootReducer","combineReducers","tasks","state","action","type","copyState","todoListID","filter","task","id","taskId","newTask","v1","title","isDone","map","t","taskID","todolists","tl","newTodoList","todoList","find","todoList2","store","createStore","window","TodoInput","children","addItem","useState","setTitle","error","setError","addItm","trim","className","classes","todoWrapper","form","TextField","variant","onKeyPress","e","key","value","label","helperText","onChange","currentTarget","IconButton","onClick","AddBox","span","errorSpan","SupperButton","red","restProps","buttonClassName","common","activeBtn","redBtn","EditableSpan","bold","modeOn","changeValue","editMode","setEditMode","titleValue","setTitleValue","activatedEditMode","deActivatedEditMode","wrapper","input","onBlur","autoFocus","onDoubleClick","refactorButton","Affairs","changeTaskTitle","todoID","changeTaskStatus","deleteCallBack","checkbox","Checkbox","checked","done","newValue","Delete","TodoButtons","changeFilter","Button","color","TodoList","removeTodoList","changeTodoListTitle","todoLists","addTask","infoBlock","info","AppWithRedux","useSelector","dispatch","useDispatch","ChangeTaskStatusAC","ChangeTaskTitleAC","newFilterValue","AddTaskAC","RemoveTaskAC","newTitle","changeTodoListTitleAC","removeTodolistAC","tasksForTodo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a8d512c7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoWrapper\":\"TodoAffairs_todoWrapper__2dlvy\",\"active\":\"TodoAffairs_active__RBRlY\",\"tasks\":\"TodoAffairs_tasks__1fz1s\",\"title\":\"TodoAffairs_title__3-zu-\",\"span\":\"TodoAffairs_span__2P6Gt\",\"infoBlock\":\"TodoAffairs_infoBlock__2kqKR\",\"info\":\"TodoAffairs_info__1O81Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"EditablSpan_wrapper__Tzl53\",\"bold\":\"EditablSpan_bold__3lbE0\",\"input\":\"EditablSpan_input__3_n0c\",\"refactorButton\":\"EditablSpan_refactorButton__1CyXX\",\"deleteButton\":\"EditablSpan_deleteButton__XHXER\",\"active\":\"EditablSpan_active__2t1P0\",\"common\":\"EditablSpan_common__2dl0o\",\"done\":\"EditablSpan_done__3eaMz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoWrapper\":\"TodoInput_todoWrapper__Exh6I\",\"form\":\"TodoInput_form__3hlvt\",\"errorInput\":\"TodoInput_errorInput__2MaRL\",\"span\":\"TodoInput_span__29UBg\",\"errorSpan\":\"TodoInput_errorSpan__AbmWJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoWrapper\":\"Affairs_todoWrapper__2BIel\",\"checkbox\":\"Affairs_checkbox__Ohjv1\",\"title\":\"Affairs_title__2gRVU\",\"refactorButton\":\"Affairs_refactorButton__1ouoI\",\"deleteButton\":\"Affairs_deleteButton__3RJjV\",\"active\":\"Affairs_active__1fnEa\",\"done\":\"Affairs_done__R6dzx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoWrapper\":\"SupperButton_todoWrapper__14j--\",\"redBtn\":\"SupperButton_redBtn__6fai5\",\"common\":\"SupperButton_common__2hrGu\",\"activeBtn\":\"SupperButton_activeBtn__EU8FB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoWrapper\":\"TodoButtons_todoWrapper__1vLn6\",\"activeBtn\":\"TodoButtons_activeBtn__VRYa2\"};","import {DefaultTasksType, TaskStateType} from \"../types/types\";\r\nimport {v1} from \"uuid\";\r\nimport {\r\n    ActionsType,\r\n    AddTaskActionType,\r\n    ChangeTaskStatusActionType,\r\n    ChangeTaskTitleActionType,\r\n    RemoveTaskActionType\r\n} from \"../types/types\";\r\n\r\n\r\n\r\nconst InitialState:TaskStateType = {\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport const tasksReducer = (state = InitialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const copyState = {...state}\r\n\r\n            copyState[action.todoListID] = copyState[action.todoListID].filter(task => task.id !== action.taskId)\r\n            return copyState\r\n            // return {...state, [action.todoListID]: state[action.todoListID].filter(task => task.id !== action.taskId)}\r\n        }\r\n\r\n        case 'ADD-TASK': {\r\n\r\n            const copyState = {...state}\r\n            const newTask: DefaultTasksType = {\r\n                id: v1(),\r\n                title: action.title,\r\n                isDone: false\r\n            }\r\n            // copyState[action.todoListID] =[newTask, ...copyState[action.todoListID]]\r\n            //\r\n            // return copyState\r\n            return {...state, [action.todoListID]: [newTask, ...state[action.todoListID]]}\r\n        }\r\n        case \"CHANGE-TASK-STATUS\" : {\r\n            return {\r\n                ...state, [action.todoListID]: state[action.todoListID].map\r\n                (t => {\r\n                    if (t.id !== action.taskID) return t\r\n                    else return {...t, isDone: action.isDone}\r\n                })\r\n            }\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            return {\r\n                ...state, [action.todoListID]: state[action.todoListID].map\r\n                (t => {\r\n                    if (t.id !== action.taskID) return t\r\n                    else return {...t, title: action.title}\r\n                })\r\n            }\r\n        }\r\n\r\n        case 'REMOVE-TODOLIST': {\r\n            let copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n\r\n\r\n        }\r\n        case 'ADD-TODO-LIST': {\r\n\r\n            return {...state,[action.todoListID]: []}\r\n\r\n\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const RemoveTaskAC = (taskId: string, todoListID: string): RemoveTaskActionType => (\r\n    {type: \"REMOVE-TASK\", taskId, todoListID}\r\n)\r\n\r\nexport const AddTaskAC = (title: string, todoListID: string): AddTaskActionType => (\r\n    {type: \"ADD-TASK\", title, todoListID}\r\n)\r\n\r\nexport const ChangeTaskStatusAC = (taskID: string, isDone: boolean, todoListID: string): ChangeTaskStatusActionType => (\r\n    {type: 'CHANGE-TASK-STATUS', taskID, isDone, todoListID}\r\n)\r\n\r\n\r\nexport const ChangeTaskTitleAC = (taskID: string, title: string, todoListID: string): ChangeTaskTitleActionType => ({\r\n    type: 'CHANGE-TASK-TITLE', taskID, title, todoListID\r\n})\r\n\r\n\r\n\r\n\r\n\r\n","import {AffairsPriorityType, TodoListType} from \"../types/types\";\r\nimport {v1} from \"uuid\";\r\nimport {\r\n    ActionsType,\r\n    AddTodoListActionType, ChangeTodolistFilterActionType,\r\n    ChangeTodolistTitleActionType,\r\n    RemoveTodolistActionType\r\n} from \"../types/types\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst InitialState: Array<TodoListType> = [\r\n\r\n]\r\n\r\n\r\nexport const todoListsReducer = (state = InitialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n\r\n            return state.filter((tl => tl.id !== action.id))\r\n\r\n        case 'ADD-TODO-LIST' :\r\n\r\n            const newTodoList: TodoListType = {\r\n                id: action.todoListID,\r\n                title: action.title,\r\n                filter: \"all\"\r\n            }\r\n            return [...state, newTodoList]\r\n        case 'CHANGE-TODOLIST-TITLE' :\r\n            const todoList = state.find(tl => tl.id === action.id)\r\n            if (todoList) {\r\n                todoList.title = action.title\r\n                return [...state]\r\n            }\r\n            return state;\r\n        case 'CHANGE-TODOLIST-FILTER' :\r\n            const todoList2 = state.find(tl => tl.id === action.id)\r\n            if (todoList2) {\r\n                todoList2.filter = action.filter\r\n                return [...state]\r\n            }\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const removeTodolistAC = (todoListID: string): RemoveTodolistActionType => (\r\n    {type: \"REMOVE-TODOLIST\", id: todoListID}\r\n)\r\n\r\nexport const addTodolistAC = (newTitle: string): AddTodoListActionType => (\r\n    {type: \"ADD-TODO-LIST\", title: newTitle, todoListID: v1()}\r\n)\r\n\r\nexport const changeTodoListTitleAC = (newTitle: string, todoListID: string): ChangeTodolistTitleActionType => (\r\n    {type: \"CHANGE-TODOLIST-TITLE\", title: newTitle, id: todoListID}\r\n)\r\n\r\nexport const changeTodoListFilterAC = (filter: AffairsPriorityType, id: string): ChangeTodolistFilterActionType => (\r\n    {type: \"CHANGE-TODOLIST-FILTER\", filter: filter, id: id}\r\n)","import {tasksReducer} from './tasks-reducer';\r\nimport {todoListsReducer} from './todolists-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todoListsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\nimport classes from './TodoInput.module.scss';\nimport SupperInput from \"../../common/SuperInput/SupperInput\";\nimport SupperButton from \"../../common/SuperButton/SupperButton\";\nimport {Button, IconButton} from \"@material-ui/core\";\nimport {TextField} from \"@material-ui/core\";\nimport {AddBox} from \"@material-ui/icons\";\n\n\nexport type TodoInputType = {\n\n    addItem: (title: string) => void\n\n\n}\n\nconst TodoInput: React.FC<TodoInputType> = ({children, addItem}) => {\n\n    const [title, setTitle] = useState<string>(\"\")\n    const [error, setError] = useState<string>(\"\")\n\n    const addItm = () => {\n\n        if (title.trim() !== \"\") {\n            addItem(title.trim())\n            setTitle(\"\")\n        } else setError(\"Enter something\")\n\n    }\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        setError(\"\")\n        if(e.key === \"Enter\") {\n            addItm()\n        }\n    }\n\n\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setError(\"\")\n        setTitle(e.currentTarget.value)\n    }\n\n    return <div className={classes.todoWrapper}>\n\n\n        <div className={classes.form}>\n            <TextField variant={\"outlined\"}\n                       onKeyPress={onKeyPressHandler}\n                       value={title}\n                       label=\"title\"\n                       helperText={error}\n                       onChange={changeTitle}\n            />\n            <IconButton onClick={addItm}>\n                <AddBox/>\n            </IconButton>\n                {/*<Button variant=\"contained\" color={\"primary\"}  > </Button>*/}\n\n\n        </div>\n        <span className={`${classes.span} ${error && classes.errorSpan}`}>{error}</span>\n\n\n    </div>\n}\n\nexport default TodoInput;","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react';\nimport classes from './SupperButton.module.scss';\nimport {AffairsPriorityType} from \"../../../AppWithReducers\";\n\n\ntype DefaultButtonPropsType =  DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\n\n\n\n\nexport type SupperButtonType = DefaultButtonPropsType & {\n     red?: boolean\n     filter?: boolean\n}\n\nconst SupperButton:React.FC<SupperButtonType> = ({filter,red, children,...restProps}) => {\n\n\n    const buttonClassName =`${classes.common} ${filter ? classes.activeBtn: \"\"}${red ? classes.redBtn : \"\"}`\n\n    return <div className={classes.todoWrapper}>\n\n        <button className={buttonClassName} {...restProps}>{children}</button>\n\n    </div>\n}\n\nexport default SupperButton;","import React, {KeyboardEvent, ChangeEvent, useState } from \"react\";\r\nimport  classes from './EditablSpan.module.scss';\r\nimport SupperButton from \"../../../common/SuperButton/SupperButton\";\r\nimport CreateIcon from \"@material-ui/icons/Create\";\r\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\r\nimport {DefaultTasksType} from \"../../../../AppWithReducers\";\r\n\r\nexport type EditableSpanType = {\r\n    title: string\r\n    changeValue: (newValue: string) => void\r\n    modeOn?: boolean\r\n    bold?: boolean\r\n\r\n\r\n}\r\n\r\nconst EditableSpan:React.FC<EditableSpanType>= ({bold, modeOn, changeValue, title}) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [titleValue, setTitleValue] =useState<string>(title);\r\n\r\n\r\n    const activatedEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deActivatedEditMode = () => {\r\n        setEditMode(false)\r\n        changeValue(titleValue)\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        setTitleValue( e.currentTarget.value)\r\n    }\r\n\r\n    const deactivateEditM = (e: KeyboardEvent<HTMLInputElement>) => {\r\n\r\n\r\n        if(e.key === \"Enter\"){\r\n            deActivatedEditMode()\r\n        }\r\n\r\n\r\n    }\r\n\r\n    return ( <div className={classes.wrapper}>\r\n\r\n            { editMode ? <input onChange={changeTitle}\r\n                                className={classes.input}\r\n                                value={titleValue}\r\n                                onKeyPress={deactivateEditM }\r\n                                onBlur={deActivatedEditMode}\r\n                                autoFocus={true} type=\"text\"/> :\r\n                <span className={`${classes.common} ${ bold ? classes.bold : \"\"}`} onDoubleClick={activatedEditMode}>{title}</span>}\r\n            {modeOn ? <div className={classes.refactorButton}>\r\n                <SupperButton onClick={activatedEditMode}/>\r\n                <CreateIcon/>\r\n            </div> : \"\"}\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default EditableSpan;\r\n\r\n\r\n","import React, {ChangeEvent} from 'react';\nimport classes from './Affairs.module.scss';\nimport {AffairsPriorityType, DefaultTasksType} from \"../../../types/types\";\n\nimport EditableSpan from \"./EditableSpan/EditableSpan\";\n\nimport {CheckBox, Delete} from '@material-ui/icons';\nimport {IconButton, Checkbox} from \"@material-ui/core\";\n\n\nexport type PropsType = {\n    task: DefaultTasksType\n    deleteCallBack: (taskID: string, todoListID: string) => void\n    changeTaskStatus: (taskID: string, isDone: boolean, todoListID: string) => void\n    todoID: string\n    changeTaskTitle: (taskID: string, title: string, todoListID: string) => void\n    taskID: string\n}\n\nconst\n    Affairs: React.FC<PropsType> = ({taskID, changeTaskTitle, todoID, changeTaskStatus, deleteCallBack, task, ...restProps}) => {\n\n\n        const changeStatus = (e: ChangeEvent<HTMLInputElement>) => {\n            changeTaskStatus(task.id, e.currentTarget.checked, todoID)\n        }\n\n        const deleteTask = () => {\n            deleteCallBack(task.id, todoID)\n        }\n        const changeTaskTitleCallback = (newValue: string) => {\n            changeTaskTitle(task.id, newValue, todoID)\n        }\n\n        return <div className={classes.todoWrapper}>\n\n        <span className={classes.checkbox}>\n         <Checkbox checked={task.isDone} onChange={changeStatus}/>\n        </span>\n            <p className={`${classes.title} ${task.isDone ? classes.done : \"\"}`}>\n                <EditableSpan\n                    modeOn\n                    changeValue={changeTaskTitleCallback}\n                    title={task.title}/>\n\n            </p>\n\n            <IconButton   onClick={deleteTask}>\n                <Delete/>\n            </IconButton>\n        </div>\n    }\n\nexport default Affairs;","import React from 'react';\nimport classes from './TodoButtons.module.scss';\nimport {AffairsPriorityType, DefaultTasksType} from \"../../../AppWithReducers\";\nimport SupperButton from \"../../common/SuperButton/SupperButton\";\nimport {Button} from \"@material-ui/core\";\n\n\n\nexport type TodoButtonsType = {\n    changeFilter:(filter: AffairsPriorityType, todoListID:string) => void\n    todoID: string\n    filter: AffairsPriorityType\n}\n\nconst TodoButtons:React.FC<TodoButtonsType> = ({filter, todoID, changeFilter}) => {\n\n\n\n    const setAll = () => {changeFilter(\"all\", todoID)}\n    const setComplete = () => {changeFilter(\"complete\", todoID)}\n    const setActive = () => {changeFilter(\"active\", todoID)}\n\n    return <div className={classes.todoWrapper}>\n\n        <Button\n            color={filter === 'all' ? \"secondary\" : \"primary\"}\n            variant={\"contained\"}\n            onClick={setAll}>all</Button>\n        <Button\n            color={filter === 'complete' ? \"secondary\" : \"primary\"}\n            variant={\"contained\"}\n            onClick={setComplete}>complete</Button>\n        <Button\n            color={filter === 'active' ? \"secondary\" : \"primary\"}\n            variant={\"contained\"}\n            onClick={setActive}>active</Button>\n\n\n    </div>\n}\n\nexport default TodoButtons;","import React  from 'react';\nimport classes from './TodoAffairs.module.scss';\nimport TodoInput from \"./TodoInput/TodoInput\";\nimport Affairs from \"./Affairs/Affairs\";\nimport TodoButtons from \"./TodoButtons/TodoButtons\";\nimport {AffairsPriorityType, DefaultTasksType, TaskStateType, TodoListType} from '../../types/types'\n\nimport EditableSpan from \"./Affairs/EditableSpan/EditableSpan\";\nimport {IconButton} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\n\n\n\nexport type TodoListPropsType = {\n    tasks: Array<DefaultTasksType>\n    changeFilter: (newFilterValue: AffairsPriorityType, todoListID: string) => void\n    deleteCallBack: (taskID: string, todoListID: string) => void\n    addTask: (title: string, todoListID: string) => void\n    changeTaskStatus: (taskID: string, isDone: boolean, todoListID: string) => void\n    todoID: string\n    title: string\n    changeTaskTitle: (taskID: string, title: string, todoListID: string) => void\n    todoLists:Array<TodoListType>\n    filter: AffairsPriorityType\n    changeTodoListTitle: (newTitle: string, todoListID: string) => void\n    removeTodoList:(todoListID: string) => void\n\n}\n\nconst TodoList: React.FC<TodoListPropsType> = ({removeTodoList, todoLists,changeTodoListTitle,  filter,\n                                              changeTaskTitle, title,\n                                             todoID, tasks,\n                                              changeTaskStatus, addTask, deleteCallBack, changeFilter}) => {\n\n    const addItem = (title: string) => {\n        addTask(title, todoID)\n    }\n    // let activeTasks = tasks.filter(t => t.isDone === false);\n    // let doneTasks = tasks.filter(t => t.isDone === true);\n\n    const removeTodoCallback = () => {\n        removeTodoList(todoID)\n    }\n    const changeTodoListTitleCallback = (title: string) => {\n        changeTodoListTitle(title, todoID)\n    }\n\n    return <div className={classes.todoWrapper}>\n        <div className={classes.title}>\n           <div className={classes.span}>\n               <EditableSpan\n                    bold\n                   changeValue={changeTodoListTitleCallback}\n                   title={title}/>\n           </div>\n            <IconButton>\n                <Delete onClick={removeTodoCallback}/>\n            </IconButton>\n        </div>\n\n        <div className={classes.input}>\n            <TodoInput addItem={addItem}>addTask</TodoInput>\n        </div>\n\n        <div className={classes.tasks}>\n            {tasks.map(t => <Affairs\n                changeTaskTitle={changeTaskTitle}\n                key={t.id}\n                taskID={t.id}\n                changeTaskStatus={changeTaskStatus}\n                task={t}\n                todoID={todoID}\n                deleteCallBack={deleteCallBack}\n            />)}\n        </div>\n        <TodoButtons filter={filter} todoID={todoID} changeFilter={changeFilter}/>\n        <div className={classes.infoBlock}>\n            <span className={classes.info}>\n            {/*tasks todo: {activeTasks.length}*/}\n        </span>\n            <span className={classes.info}>\n            {/*done tasks: {doneTasks.length}*/}\n        </span>\n        </div>\n\n\n    </div>\n}\n\nexport default TodoList;","import React, {ChangeEvent, useReducer, useState} from 'react';\r\nimport './App.css';\r\nimport TodoList from \"./components/TodoList/TodoAffairs\";\r\nimport {v1} from \"uuid\";\r\nimport TodoInput from \"./components/TodoList/TodoInput/TodoInput\";\r\nimport {\r\n    addTodolistAC,\r\n    changeTodoListFilterAC,\r\n    changeTodoListTitleAC, removeTodolistAC,\r\n\r\n} from \"./state/todolists-reducer\";\r\nimport {AddTaskAC, ChangeTaskStatusAC, ChangeTaskTitleAC, RemoveTaskAC, tasksReducer} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {AffairsPriorityType, TaskStateType, TodoListType} from \"./types/types\";\r\n\r\n\r\n\r\n\r\nfunction AppWithRedux() {\r\n\r\n\r\n   const todoLists = useSelector<AppRootStateType, Array<TodoListType>>(state => state.todolists)\r\n   const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const changeTaskStatus = (taskID: string, isDone: boolean, todoListID: string) => {\r\n\r\n        dispatch(ChangeTaskStatusAC(taskID, isDone, todoListID));\r\n\r\n    }\r\n    const changeTaskTitle = (taskID: string, title: string, todoListID: string) => {\r\n\r\n        dispatch(ChangeTaskTitleAC(taskID, title, todoListID));\r\n\r\n    }\r\n    const changeFilter = (newFilterValue: AffairsPriorityType, todoListID: string) => {\r\n\r\n        dispatch(changeTodoListFilterAC(newFilterValue, todoListID));\r\n    }\r\n    const addTask = (title: string, todoListID: string) => {\r\n\r\n\r\n        dispatch(AddTaskAC(title, todoListID));\r\n    }\r\n    const deleteCallBack = (taskID: string, todoListID: string) => {\r\n\r\n\r\n        dispatch(RemoveTaskAC(taskID, todoListID));\r\n\r\n    }\r\n\r\n    const changeTodoListTitle = (newTitle: string, todoListID: string) => {\r\n\r\n        dispatch(changeTodoListTitleAC(newTitle, todoListID));\r\n    }\r\n    const removeTodoList = (todoListID: string) => {\r\n        const action = removeTodolistAC(todoListID);\r\n\r\n        dispatch(action);\r\n\r\n    }\r\n    const addTodoList = (title: string) => {\r\n        const action = addTodolistAC(title);\r\n        dispatch(action);\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <div className=\"App\">\r\n            <div className='createTodo'>\r\n                <TodoInput addItem={addTodoList}>addTodo</TodoInput>\r\n            </div>\r\n            <div className=\"todoLists\">\r\n                {todoLists.map(tl => {\r\n\r\n                    let tasksForTodo = tasks[tl.id]\r\n                    if (tl.filter === \"complete\") {\r\n                        tasksForTodo = tasks[tl.id].filter(task => task.isDone === true)\r\n                    }\r\n                    if (tl.filter === \"active\") {\r\n                        tasksForTodo = tasks[tl.id].filter(task => task.isDone === false)\r\n                    }\r\ndebugger\r\n\r\n                    return (\r\n                        <div>\r\n\r\n                            <TodoList\r\n                                todoLists={todoLists}\r\n                                todoID={tl.id}\r\n                                removeTodoList={removeTodoList}\r\n                                key={tl.id}\r\n                                title={tl.title}\r\n                                filter={tl.filter}\r\n                                tasks={tasksForTodo}\r\n                                changeFilter={changeFilter}\r\n                                deleteCallBack={deleteCallBack}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeTaskStatus}\r\n                                changeTaskTitle={changeTaskTitle} changeTodoListTitle={changeTodoListTitle}/>\r\n\r\n\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {store} from './state/store';\nimport {Provider} from 'react-redux';\nimport AppWithRedux from \"./AppWithRedux\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <AppWithRedux/>\n    </Provider>, document.getElementById('root'));\n\n"],"sourceRoot":""}